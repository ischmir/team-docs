<<<<<<< Updated upstream
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Team Documentation Introduction Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources. Quick Links Team Guidelines Getting Started Tips'n Tricks mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project Layout mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol FAQ and Troubleshooting Is there a mistake? It is either a grammar error or your fault in any other way. Can't find the mistake? Look at the answer above.","title":"Home"},{"location":"#welcome-to-team-documentation","text":"","title":"Welcome to Team Documentation"},{"location":"#introduction","text":"Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources.","title":"Introduction"},{"location":"#quick-links","text":"Team Guidelines Getting Started","title":"Quick Links"},{"location":"#tipsn-tricks","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Tips'n Tricks"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol","title":"Project Layout"},{"location":"#faq-and-troubleshooting","text":"Is there a mistake? It is either a grammar error or your fault in any other way. Can't find the mistake? Look at the answer above.","title":"FAQ and Troubleshooting"},{"location":"about/","text":"The Team Developer Team Bawar Hamid Mai Jockwich Timm Hinsch Design Team Anna Hansen Katrhine Lund Jensen Laurids Ravn Hansen Gina Pantikainen","title":"About"},{"location":"about/#the-team","text":"","title":"The Team"},{"location":"about/#developer-team","text":"Bawar Hamid Mai Jockwich Timm Hinsch","title":"Developer Team"},{"location":"about/#design-team","text":"Anna Hansen Katrhine Lund Jensen Laurids Ravn Hansen Gina Pantikainen","title":"Design Team"},{"location":"apiDocumentation/","text":"API Documentation Tabbed Layout Request/Response","title":"apiDocumentation"},{"location":"apiDocumentation/#api-documentation","text":"","title":"API Documentation"},{"location":"apiDocumentation/#tabbed-layout","text":"","title":"Tabbed Layout"},{"location":"apiDocumentation/#requestresponse","text":"","title":"Request/Response"},{"location":"architectureAndTechnology/","text":"Architecture and Technology documentation Architecture Technology Selection Vue Sass Firebase / Firestore Pinia ESLint Vue Sass Firebase / Firestore Pinia ESLint Snyk","title":"Technology Documentation"},{"location":"architectureAndTechnology/#architecture-and-technology-documentation","text":"","title":"Architecture and Technology documentation"},{"location":"architectureAndTechnology/#architecture","text":"","title":"Architecture"},{"location":"architectureAndTechnology/#technology-selection","text":"Vue Sass Firebase / Firestore Pinia ESLint","title":"Technology Selection"},{"location":"architectureAndTechnology/#vue","text":"","title":"Vue"},{"location":"architectureAndTechnology/#sass","text":"","title":"Sass"},{"location":"architectureAndTechnology/#firebase-firestore","text":"","title":"Firebase / Firestore"},{"location":"architectureAndTechnology/#pinia","text":"","title":"Pinia"},{"location":"architectureAndTechnology/#eslint","text":"","title":"ESLint"},{"location":"architectureAndTechnology/#snyk","text":"","title":"Snyk"},{"location":"gettingStarted/","text":"Getting Started Hello Installation Dev-Environment Setup","title":"Getting Started"},{"location":"gettingStarted/#getting-started","text":"Hello","title":"Getting Started"},{"location":"gettingStarted/#installation","text":"","title":"Installation"},{"location":"gettingStarted/#dev-environment-setup","text":"","title":"Dev-Environment Setup"},{"location":"githubActions/","text":"Git Workflow Branching Strategy Branch Naming Conventions Continuous Integration / Deployment Commits github messages","title":"GitHub Actions"},{"location":"githubActions/#git-workflow","text":"","title":"Git Workflow"},{"location":"githubActions/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"githubActions/#branch-naming-conventions","text":"","title":"Branch Naming Conventions"},{"location":"githubActions/#continuous-integration-deployment","text":"","title":"Continuous Integration / Deployment"},{"location":"githubActions/#commits","text":"github messages","title":"Commits"},{"location":"guidelines/","text":"Team Guidelines Communication Check email at least twice daily Respond to Discord messages within 4 hours Attend daily standup meetings Development Workflow Create a branch for each feature Submit pull requests for review Ensure tests pass before merging Refactor Guidelines Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor(name, email) { this.name = name; this.email = email; } sendEmail(message) { console.log(`Sending email to ${this.email}: ${message}`); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities //Instead of this const area1 = length1 * width1; const area2 = length2 * width2; const area3 = length3 * width3; //Do this function calculateArea(length, width) { return length * width; } const area1 = calculateArea (length1, width1); const area2 = calculateArea (length2, width2); const area3 = calculateArea (length3, width3); Keep It Simple Stupid Code Review Error Handling and Debugging Better Safe than Sorry","title":"Guidelines"},{"location":"guidelines/#team-guidelines","text":"","title":"Team Guidelines"},{"location":"guidelines/#communication","text":"Check email at least twice daily Respond to Discord messages within 4 hours Attend daily standup meetings","title":"Communication"},{"location":"guidelines/#development-workflow","text":"Create a branch for each feature Submit pull requests for review Ensure tests pass before merging","title":"Development Workflow"},{"location":"guidelines/#refactor-guidelines","text":"Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor(name, email) { this.name = name; this.email = email; } sendEmail(message) { console.log(`Sending email to ${this.email}: ${message}`); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities //Instead of this const area1 = length1 * width1; const area2 = length2 * width2; const area3 = length3 * width3; //Do this function calculateArea(length, width) { return length * width; } const area1 = calculateArea (length1, width1); const area2 = calculateArea (length2, width2); const area3 = calculateArea (length3, width3); Keep It Simple Stupid","title":"Refactor Guidelines"},{"location":"guidelines/#code-review","text":"","title":"Code Review"},{"location":"guidelines/#error-handling-and-debugging","text":"","title":"Error Handling and Debugging"},{"location":"guidelines/#better-safe-than-sorry","text":"","title":"Better Safe than Sorry"},{"location":"unitTest/","text":"Unit Test Documentation Unit Test Frameworks and Tools End-to-End (E2E) Teststrategies Cypress APM (Application Performance Monitoring) Performance and benchmarks","title":"Unit Tests"},{"location":"unitTest/#unit-test","text":"","title":"Unit Test"},{"location":"unitTest/#documentation","text":"","title":"Documentation"},{"location":"unitTest/#unit-test-frameworks-and-tools","text":"","title":"Unit Test Frameworks and Tools"},{"location":"unitTest/#end-to-end-e2e-teststrategies","text":"","title":"End-to-End (E2E) Teststrategies"},{"location":"unitTest/#cypress","text":"","title":"Cypress"},{"location":"unitTest/#apm-application-performance-monitoring","text":"","title":"APM (Application Performance Monitoring)"},{"location":"unitTest/#performance-and-benchmarks","text":"","title":"Performance and benchmarks"},{"location":"versioncontrol/","text":"Changelog and Versioncontrol","title":"Changelog and Versioncontrol"},{"location":"versioncontrol/#changelog-and-versioncontrol","text":"","title":"Changelog and Versioncontrol"}]}
=======
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Team Documentation Introduction Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources. Quick Links Team Guidelines Getting Started Tips'n Tricks mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project Layout mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol FAQ and Troubleshooting Check for grammatical errors.","title":"Home"},{"location":"#welcome-to-team-documentation","text":"","title":"Welcome to Team Documentation"},{"location":"#introduction","text":"Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources.","title":"Introduction"},{"location":"#quick-links","text":"Team Guidelines Getting Started","title":"Quick Links"},{"location":"#tipsn-tricks","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Tips'n Tricks"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol","title":"Project Layout"},{"location":"#faq-and-troubleshooting","text":"Check for grammatical errors.","title":"FAQ and Troubleshooting"},{"location":"about/","text":"About Project Overview This project is a collaborative effort to develop a modern dashboard for DBI. The dashboard aims to improve user experience, streamline workflows, and provide valuable insights through data visualization. The Team Design Team - Anna Hansen - Katrhine Lund Jensen - Laurids Ravn Hansen - Gina Pantikainen Developer Team - Bawar Hamid - Mai Jockwich - Timm Hinsch Collaboration This project was developed in collaboration with Digital Concept Development students, who contributed to the design and user experience aspects of the dashboard. Technologies Used Frontend: Vue.js Backend: Node.js, Express.js Database: Firestore Other Tools: GitHub, Figma, MkDocs Acknowledgments We would like to thank our mentors and DBI for their guidance and support throughout the project.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#project-overview","text":"This project is a collaborative effort to develop a modern dashboard for DBI. The dashboard aims to improve user experience, streamline workflows, and provide valuable insights through data visualization.","title":"Project Overview"},{"location":"about/#the-team","text":"Design Team - Anna Hansen - Katrhine Lund Jensen - Laurids Ravn Hansen - Gina Pantikainen Developer Team - Bawar Hamid - Mai Jockwich - Timm Hinsch","title":"The Team"},{"location":"about/#collaboration","text":"This project was developed in collaboration with Digital Concept Development students, who contributed to the design and user experience aspects of the dashboard.","title":"Collaboration"},{"location":"about/#technologies-used","text":"Frontend: Vue.js Backend: Node.js, Express.js Database: Firestore Other Tools: GitHub, Figma, MkDocs","title":"Technologies Used"},{"location":"about/#acknowledgments","text":"We would like to thank our mentors and DBI for their guidance and support throughout the project.","title":"Acknowledgments"},{"location":"apiDocumentation/","text":"API Documentation Tabbed Layout Request/Response","title":"apiDocumentation"},{"location":"apiDocumentation/#api-documentation","text":"","title":"API Documentation"},{"location":"apiDocumentation/#tabbed-layout","text":"","title":"Tabbed Layout"},{"location":"apiDocumentation/#requestresponse","text":"","title":"Request/Response"},{"location":"architectureAndTechnology/","text":"Architecture and Technology documentation Architecture Technology Selection Vue Sass Firebase / Firestore Pinia ESLint Vue Sass Firebase / Firestore Pinia ESLint Snyk","title":"Technology Documentation"},{"location":"architectureAndTechnology/#architecture-and-technology-documentation","text":"","title":"Architecture and Technology documentation"},{"location":"architectureAndTechnology/#architecture","text":"","title":"Architecture"},{"location":"architectureAndTechnology/#technology-selection","text":"Vue Sass Firebase / Firestore Pinia ESLint","title":"Technology Selection"},{"location":"architectureAndTechnology/#vue","text":"","title":"Vue"},{"location":"architectureAndTechnology/#sass","text":"","title":"Sass"},{"location":"architectureAndTechnology/#firebase-firestore","text":"","title":"Firebase / Firestore"},{"location":"architectureAndTechnology/#pinia","text":"","title":"Pinia"},{"location":"architectureAndTechnology/#eslint","text":"","title":"ESLint"},{"location":"architectureAndTechnology/#snyk","text":"","title":"Snyk"},{"location":"gettingStarted/","text":"Getting Started Hello Installation Dev-Environment Setup","title":"Getting Started"},{"location":"gettingStarted/#getting-started","text":"Hello","title":"Getting Started"},{"location":"gettingStarted/#installation","text":"","title":"Installation"},{"location":"gettingStarted/#dev-environment-setup","text":"","title":"Dev-Environment Setup"},{"location":"githubActions/","text":"Git Workflow Branching Strategy Branch Naming Conventions Continuous Integration / Deployment","title":"GitHub Actions"},{"location":"githubActions/#git-workflow","text":"","title":"Git Workflow"},{"location":"githubActions/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"githubActions/#branch-naming-conventions","text":"","title":"Branch Naming Conventions"},{"location":"githubActions/#continuous-integration-deployment","text":"","title":"Continuous Integration / Deployment"},{"location":"guidelines/","text":"Team Guidelines Communication Check email at least twice daily Respond to Discord messages within 4 hours Attend daily standup meetings Development Workflow Create a branch for each feature Submit pull requests for review Ensure tests pass before merging Refactor Guidelines Best Practices: Make small incremental changes Test after each refactoring Commit Frequently Keep functions small end focused Avoid deep nesting Use constants for magic numbers and strings Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor ( name , email ) { this . name = name ; this . email = email ; } sendEmail ( message ) { console . log ( `Sending email to ${ this . email } : ${ message } ` ); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities // Do this function calculateArea ( length , width ) { return length * width ; } const area1 = calculateArea ( length1 , width1 ); const area2 = calculateArea ( length2 , width2 ); const area3 = calculateArea ( length3 , width3 ); // Not this const area1 = length1 * width1 ; const area2 = length2 * width2 ; const area3 = length3 * width3 ; Keep It Simple Stupid Simpler code is easier to maintain Avoid clever tricks Clear and straightforward solutions are better Remember code is read more often than it is written // Do this - Simple code, easy to read function getUserStatus ( age , isMember ) { if ( age >= 18 ) { if ( isMember ) { return \"Adult Member\" ; } else { return \"Adult Non-Member\" ; } } else { if ( isMember ) { return \"Minor Member\" ; } else { return \"Minor Non-Member\" ; } } } // Not this - Clever but hard to read function getUserStatus ( age , isMember ) { const status = >= 18 ? \"Adult\" : \"Minor\" ; return ` ${ status } ${ isMember ? \"Member\" : \"Non-Member\" } ` ; } You Aren't Going To Need It Don't add it unless you need it Focus on current requirements class User { constructor ( name , email ) { this . name = name ; this . email = email ; this . phonenumber = phonenumber ; // We might need this later this . preferences = preferences ; // Also for later use } } Writing Self-Documenting Code Use explanitory variables, functions etc. //Good const currentDate = new Date (); const timestamp = currentDate . getTime (;) //Bad const d = new Date (); const n = currentDate . getTime (;) //Good function validateUserInput ( formData ) { // ... Validates user input } //Bad function data ( form ) { // ... does something with data } Code Comments Explain why, not what Keep Comments up to date Don't overuse comments /** * Calculates the total price including tax and discounts * @param {number} basePrise - the original price * @param {number} taxRate - taxrate as decimal (e.g., 0.2 for 20%) * @param {boolean} hasDiscount - Whether to standard discount * @returns {number} the final price */ function calculateFinalPrice ( basePrice , taxRate , hasDiscount ) { // implementation } Code Review Error Handling and Debugging Safety","title":"Guidelines"},{"location":"guidelines/#team-guidelines","text":"","title":"Team Guidelines"},{"location":"guidelines/#communication","text":"Check email at least twice daily Respond to Discord messages within 4 hours Attend daily standup meetings","title":"Communication"},{"location":"guidelines/#development-workflow","text":"Create a branch for each feature Submit pull requests for review Ensure tests pass before merging","title":"Development Workflow"},{"location":"guidelines/#refactor-guidelines","text":"Best Practices: Make small incremental changes Test after each refactoring Commit Frequently Keep functions small end focused Avoid deep nesting Use constants for magic numbers and strings Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor ( name , email ) { this . name = name ; this . email = email ; } sendEmail ( message ) { console . log ( `Sending email to ${ this . email } : ${ message } ` ); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities // Do this function calculateArea ( length , width ) { return length * width ; } const area1 = calculateArea ( length1 , width1 ); const area2 = calculateArea ( length2 , width2 ); const area3 = calculateArea ( length3 , width3 ); // Not this const area1 = length1 * width1 ; const area2 = length2 * width2 ; const area3 = length3 * width3 ; Keep It Simple Stupid Simpler code is easier to maintain Avoid clever tricks Clear and straightforward solutions are better Remember code is read more often than it is written // Do this - Simple code, easy to read function getUserStatus ( age , isMember ) { if ( age >= 18 ) { if ( isMember ) { return \"Adult Member\" ; } else { return \"Adult Non-Member\" ; } } else { if ( isMember ) { return \"Minor Member\" ; } else { return \"Minor Non-Member\" ; } } } // Not this - Clever but hard to read function getUserStatus ( age , isMember ) { const status = >= 18 ? \"Adult\" : \"Minor\" ; return ` ${ status } ${ isMember ? \"Member\" : \"Non-Member\" } ` ; } You Aren't Going To Need It Don't add it unless you need it Focus on current requirements class User { constructor ( name , email ) { this . name = name ; this . email = email ; this . phonenumber = phonenumber ; // We might need this later this . preferences = preferences ; // Also for later use } } Writing Self-Documenting Code Use explanitory variables, functions etc. //Good const currentDate = new Date (); const timestamp = currentDate . getTime (;) //Bad const d = new Date (); const n = currentDate . getTime (;) //Good function validateUserInput ( formData ) { // ... Validates user input } //Bad function data ( form ) { // ... does something with data } Code Comments Explain why, not what Keep Comments up to date Don't overuse comments /** * Calculates the total price including tax and discounts * @param {number} basePrise - the original price * @param {number} taxRate - taxrate as decimal (e.g., 0.2 for 20%) * @param {boolean} hasDiscount - Whether to standard discount * @returns {number} the final price */ function calculateFinalPrice ( basePrice , taxRate , hasDiscount ) { // implementation }","title":"Refactor Guidelines"},{"location":"guidelines/#code-review","text":"","title":"Code Review"},{"location":"guidelines/#error-handling-and-debugging","text":"","title":"Error Handling and Debugging"},{"location":"guidelines/#safety","text":"","title":"Safety"},{"location":"unitTest/","text":"Unit Test Documentation Unit Test Frameworks and Tools End-to-End (E2E) Teststrategies Cypress APM (Application Performance Monitoring) Performance and benchmarks","title":"Unit Tests"},{"location":"unitTest/#unit-test","text":"","title":"Unit Test"},{"location":"unitTest/#documentation","text":"","title":"Documentation"},{"location":"unitTest/#unit-test-frameworks-and-tools","text":"","title":"Unit Test Frameworks and Tools"},{"location":"unitTest/#end-to-end-e2e-teststrategies","text":"","title":"End-to-End (E2E) Teststrategies"},{"location":"unitTest/#cypress","text":"","title":"Cypress"},{"location":"unitTest/#apm-application-performance-monitoring","text":"","title":"APM (Application Performance Monitoring)"},{"location":"unitTest/#performance-and-benchmarks","text":"","title":"Performance and benchmarks"},{"location":"versioncontrol/","text":"Changelog and Versioncontrol","title":"Changelog and Versioncontrol"},{"location":"versioncontrol/#changelog-and-versioncontrol","text":"","title":"Changelog and Versioncontrol"}]}
>>>>>>> Stashed changes
