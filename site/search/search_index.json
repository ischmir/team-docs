{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DBI Dashboard Project Documentation Introduction Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources. Quick Links Team Guidelines Getting Started Tips'n Tricks mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project Layout mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol FAQ Check for grammatical errors.","title":"Home"},{"location":"#dbi-dashboard-project-documentation","text":"","title":"DBI Dashboard Project Documentation"},{"location":"#introduction","text":"Welcome to the official documentation for our team! This site serves as a comprehensive guide to our team's guidelines, processes, and resources. Here you will find valuable information to help you navigate and contribute to our projects effectively. Our goal is to maintain a clear and organized repository of knowledge that supports our team's collaboration and productivity. Here, you will find everything from team guidelines and best practices to detailed project documentation and helpful resources.","title":"Introduction"},{"location":"#quick-links","text":"Team Guidelines Getting Started","title":"Quick Links"},{"location":"#tipsn-tricks","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Tips'n Tricks"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ about.md # About the team apiDocumentation.md # Documentation for the API architectureAndTechnology.md # Architecture and techonology documentation gettingStarted.md # Installation and dev-environment setup githubActions.md # About the git Workflow guidelines.md # Guidelines for the team index.md # The documentation homepage unitTest.md # Documentation for the unit tests versioncontrol.md Changelog and Documentation for the versioncontrol","title":"Project Layout"},{"location":"#faq","text":"Check for grammatical errors.","title":"FAQ"},{"location":"about/","text":"About Project Overview This project is a collaborative effort to develop a modern dashboard for DBI. The dashboard aims to improve user experience, streamline workflows, and provide valuable insights through data visualization. The Team Design Team - \ud83c\udf4d Anna Hansen - \ud83d\ude38 Kathrine Lund Jensen - \ud83d\udc26\u200d\u2b1b Laurids Ravn Hansen - \ud83d\udc0d Gina Pantikainen Developer Team - \ud83d\udc22 Mai Jockwich - \ud83e\udd84 Timm Hinsch Collaboration This project was developed in collaboration with Digital Concept Development students, who contributed to the design and user experience aspects of the dashboard. Technologies Used Frontend: Vue.js, Sass Backend as a Service: Firestore Other Tools: GitHub, Figma, MkDocs Acknowledgments We would like to thank our mentors and DBI for their guidance and support throughout the project.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#project-overview","text":"This project is a collaborative effort to develop a modern dashboard for DBI. The dashboard aims to improve user experience, streamline workflows, and provide valuable insights through data visualization.","title":"Project Overview"},{"location":"about/#the-team","text":"Design Team - \ud83c\udf4d Anna Hansen - \ud83d\ude38 Kathrine Lund Jensen - \ud83d\udc26\u200d\u2b1b Laurids Ravn Hansen - \ud83d\udc0d Gina Pantikainen Developer Team - \ud83d\udc22 Mai Jockwich - \ud83e\udd84 Timm Hinsch","title":"The Team"},{"location":"about/#collaboration","text":"This project was developed in collaboration with Digital Concept Development students, who contributed to the design and user experience aspects of the dashboard.","title":"Collaboration"},{"location":"about/#technologies-used","text":"Frontend: Vue.js, Sass Backend as a Service: Firestore Other Tools: GitHub, Figma, MkDocs","title":"Technologies Used"},{"location":"about/#acknowledgments","text":"We would like to thank our mentors and DBI for their guidance and support throughout the project.","title":"Acknowledgments"},{"location":"apiDocumentation/","text":"API Documentation Introduction Briefly explain the purpose of the API and its intended use. Mention the base URL for the API. Welcome to the API documentation for our project. This API allows developers to interact with the system programmatically to retrieve and manage data. Authentication Describe how to authenticate with the API (e.g., API keys, OAuth tokens, etc.). Provide examples of how to include authentication in requests. Endpoints List all available API endpoints, grouped by functionality (e.g., user management, data retrieval). For each endpoint, include: HTTP Method (e.g., GET, POST, PUT, DELETE). Endpoint URL. Description of what the endpoint does. Request Parameters (query parameters, headers, body, etc.). Response Format (status codes, JSON structure, etc.). Examples of requests and responses. Error Handling Document common error codes and their meanings. Provide examples of error responses. 400 Bad Request: Invalid input data. 401 Unauthorized: Missing or invalid API key. 404 Not Found: Resource not found. Rate Limiting (if applicable) Explain any rate limits or quotas for API usage. Examples Provide sample code snippets in different programming languages (e.g., JavaScript Python) to demonstrate how to interact with the API.","title":"API Documentation"},{"location":"apiDocumentation/#api-documentation","text":"","title":"API Documentation"},{"location":"apiDocumentation/#introduction","text":"Briefly explain the purpose of the API and its intended use. Mention the base URL for the API. Welcome to the API documentation for our project. This API allows developers to interact with the system programmatically to retrieve and manage data.","title":"Introduction"},{"location":"apiDocumentation/#authentication","text":"Describe how to authenticate with the API (e.g., API keys, OAuth tokens, etc.). Provide examples of how to include authentication in requests.","title":"Authentication"},{"location":"apiDocumentation/#endpoints","text":"List all available API endpoints, grouped by functionality (e.g., user management, data retrieval). For each endpoint, include: HTTP Method (e.g., GET, POST, PUT, DELETE). Endpoint URL. Description of what the endpoint does. Request Parameters (query parameters, headers, body, etc.). Response Format (status codes, JSON structure, etc.). Examples of requests and responses.","title":"Endpoints"},{"location":"apiDocumentation/#error-handling","text":"Document common error codes and their meanings. Provide examples of error responses. 400 Bad Request: Invalid input data. 401 Unauthorized: Missing or invalid API key. 404 Not Found: Resource not found.","title":"Error Handling"},{"location":"apiDocumentation/#rate-limiting-if-applicable","text":"Explain any rate limits or quotas for API usage.","title":"Rate Limiting (if applicable)"},{"location":"apiDocumentation/#examples","text":"Provide sample code snippets in different programming languages (e.g., JavaScript Python) to demonstrate how to interact with the API.","title":"Examples"},{"location":"architectureAndTechnology/","text":"Architecture and Technology documentation Architecture Technology Stack Vue Sass Firebase / Firestore Pinia ESLint Snyk BEM Vue Sass Firebase / Firestore Pinia ESLint Snyk Architecture and Technology Documentation Introduction This document provides an overview of the system architecture and the technologies used in the project. It explains the structure of the system, the rationale behind technology choices, and how the components interact. System Architecture The system is built using a modern web application architecture, consisting of the following components: - Frontend: Built with Vue.js for a dynamic and responsive user interface. - Backend: Node.js and Express.js for handling API requests and business logic. - Database: Firestore for real-time data storage and synchronization. - Authentication: Firebase Authentication for secure user login. - State Management: Pinia for managing application state. Architecture Diagram Technology Stack Vue.js Purpose: Frontend framework for building user interfaces. Why Chosen: Provides a reactive and component-based architecture, making it easy to build and maintain the UI. Usage: Used for creating the dashboard and data visualization components. Sass Purpose: CSS preprocessor for styling. Why Chosen: Enables modular and reusable styles with variables and mixins. Usage: Used for styling the application with a consistent design system. Firebase / Firestore Purpose: Backend-as-a-Service (BaaS) for real-time database and authentication. Why Chosen: Simplifies backend development and provides real-time data synchronization. Usage: Used for storing user data and managing authentication. Pinia Purpose: State management library for Vue.js. Why Chosen: Lightweight and easy to integrate with Vue.js. Usage: Used for managing global application state. ESLint Purpose: Linter for identifying and fixing code issues. Why Chosen: Ensures code quality and consistency. Usage: Configured to enforce coding standards across the project. Snyk Purpose: Security tool for identifying vulnerabilities in dependencies. Why Chosen: Helps maintain a secure codebase. Usage: Integrated into the CI/CD pipeline to scan for vulnerabilities.","title":"Technology Documentation"},{"location":"architectureAndTechnology/#architecture-and-technology-documentation","text":"","title":"Architecture and Technology documentation"},{"location":"architectureAndTechnology/#architecture","text":"","title":"Architecture"},{"location":"architectureAndTechnology/#technology-stack","text":"Vue Sass Firebase / Firestore Pinia ESLint Snyk BEM","title":"Technology Stack"},{"location":"architectureAndTechnology/#vue","text":"","title":"Vue"},{"location":"architectureAndTechnology/#sass","text":"","title":"Sass"},{"location":"architectureAndTechnology/#firebase-firestore","text":"","title":"Firebase / Firestore"},{"location":"architectureAndTechnology/#pinia","text":"","title":"Pinia"},{"location":"architectureAndTechnology/#eslint","text":"","title":"ESLint"},{"location":"architectureAndTechnology/#snyk","text":"","title":"Snyk"},{"location":"architectureAndTechnology/#architecture-and-technology-documentation_1","text":"","title":"Architecture and Technology Documentation"},{"location":"architectureAndTechnology/#introduction","text":"This document provides an overview of the system architecture and the technologies used in the project. It explains the structure of the system, the rationale behind technology choices, and how the components interact.","title":"Introduction"},{"location":"architectureAndTechnology/#system-architecture","text":"The system is built using a modern web application architecture, consisting of the following components: - Frontend: Built with Vue.js for a dynamic and responsive user interface. - Backend: Node.js and Express.js for handling API requests and business logic. - Database: Firestore for real-time data storage and synchronization. - Authentication: Firebase Authentication for secure user login. - State Management: Pinia for managing application state.","title":"System Architecture"},{"location":"architectureAndTechnology/#architecture-diagram","text":"","title":"Architecture Diagram"},{"location":"architectureAndTechnology/#technology-stack_1","text":"","title":"Technology Stack"},{"location":"architectureAndTechnology/#vuejs","text":"Purpose: Frontend framework for building user interfaces. Why Chosen: Provides a reactive and component-based architecture, making it easy to build and maintain the UI. Usage: Used for creating the dashboard and data visualization components.","title":"Vue.js"},{"location":"architectureAndTechnology/#sass_1","text":"Purpose: CSS preprocessor for styling. Why Chosen: Enables modular and reusable styles with variables and mixins. Usage: Used for styling the application with a consistent design system.","title":"Sass"},{"location":"architectureAndTechnology/#firebase-firestore_1","text":"Purpose: Backend-as-a-Service (BaaS) for real-time database and authentication. Why Chosen: Simplifies backend development and provides real-time data synchronization. Usage: Used for storing user data and managing authentication.","title":"Firebase / Firestore"},{"location":"architectureAndTechnology/#pinia_1","text":"Purpose: State management library for Vue.js. Why Chosen: Lightweight and easy to integrate with Vue.js. Usage: Used for managing global application state.","title":"Pinia"},{"location":"architectureAndTechnology/#eslint_1","text":"Purpose: Linter for identifying and fixing code issues. Why Chosen: Ensures code quality and consistency. Usage: Configured to enforce coding standards across the project.","title":"ESLint"},{"location":"architectureAndTechnology/#snyk_1","text":"Purpose: Security tool for identifying vulnerabilities in dependencies. Why Chosen: Helps maintain a secure codebase. Usage: Integrated into the CI/CD pipeline to scan for vulnerabilities.","title":"Snyk"},{"location":"gettingStarted/","text":"Getting Started Introduction Briefly welcome the user and explain the purpose of the guide. Mention what the user will achieve by following the guide. Prerequisites List any tools, software, or accounts required before starting (e.g., Git, Node.js, Python, etc.). Provide links to download or install these tools if necessary. Installation Provide step-by-step instructions to install the project or its dependencies. Include commands for cloning the repository, installing dependencies, and setting up the environment. If applicable, explain how to run tests to verify the setup. Development Environment Setup Explain how to configure the development environment. Include details about environment variables, configuration files, or any other setup steps. Running the Project Provide instructions for running the project locally. Include commands for starting the development server or running the application. Troubleshooting Include common issues and their solutions.","title":"Getting Started"},{"location":"gettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingStarted/#introduction","text":"Briefly welcome the user and explain the purpose of the guide. Mention what the user will achieve by following the guide.","title":"Introduction"},{"location":"gettingStarted/#prerequisites","text":"List any tools, software, or accounts required before starting (e.g., Git, Node.js, Python, etc.). Provide links to download or install these tools if necessary.","title":"Prerequisites"},{"location":"gettingStarted/#installation","text":"Provide step-by-step instructions to install the project or its dependencies. Include commands for cloning the repository, installing dependencies, and setting up the environment. If applicable, explain how to run tests to verify the setup.","title":"Installation"},{"location":"gettingStarted/#development-environment-setup","text":"Explain how to configure the development environment. Include details about environment variables, configuration files, or any other setup steps.","title":"Development Environment Setup"},{"location":"gettingStarted/#running-the-project","text":"Provide instructions for running the project locally. Include commands for starting the development server or running the application.","title":"Running the Project"},{"location":"gettingStarted/#troubleshooting","text":"Include common issues and their solutions.","title":"Troubleshooting"},{"location":"githubActions/","text":"Git Workflow Make small incremental changes Commit Frequently Branching Strategy Branch Naming Conventions Continuous Integration / Deployment Commits Github messages should be present tense! Messages should be short and describe what they do, max 50 characters. Commit messages can be multi-line, but ALWAYS start with a one-line description. Maximum 72 characters per line. Examples of good and bad commit messages DO \u2705 \"Fix typo in dashboard title\" \u2705 \"Refactor login code for clarity\" \u2705 \"Update member report format for clarity\" \u2705 \"Fix issue causing incorrect user permissions\" \u2705 \"Refactor dashboard styles for consistency\" DON'T \u274c \"fix typo\" \u274c \"update Update login code\" \u274c \"Updates member report, we should discuss if this is rigth next week\" \u274c Fixed a bug \u274c Update stuff","title":"GitHub Actions"},{"location":"githubActions/#git-workflow","text":"Make small incremental changes Commit Frequently","title":"Git Workflow"},{"location":"githubActions/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"githubActions/#branch-naming-conventions","text":"","title":"Branch Naming Conventions"},{"location":"githubActions/#continuous-integration-deployment","text":"","title":"Continuous Integration / Deployment"},{"location":"githubActions/#commits","text":"Github messages should be present tense! Messages should be short and describe what they do, max 50 characters. Commit messages can be multi-line, but ALWAYS start with a one-line description. Maximum 72 characters per line.","title":"Commits"},{"location":"githubActions/#examples-of-good-and-bad-commit-messages","text":"","title":"Examples of good and bad commit messages"},{"location":"githubActions/#do","text":"\u2705 \"Fix typo in dashboard title\" \u2705 \"Refactor login code for clarity\" \u2705 \"Update member report format for clarity\" \u2705 \"Fix issue causing incorrect user permissions\" \u2705 \"Refactor dashboard styles for consistency\"","title":"DO"},{"location":"githubActions/#dont","text":"\u274c \"fix typo\" \u274c \"update Update login code\" \u274c \"Updates member report, we should discuss if this is rigth next week\" \u274c Fixed a bug \u274c Update stuff","title":"DON'T"},{"location":"guidelines/","text":"Team Guidelines Introduction These guidelines are designed to ensure consistency, quality, and collaboration across the team. By following these practices, we can work efficiently and deliver high-quality results. Go To Section Communication Coding Standards Refactor Guidelines Code Review Error Handling and Debugging Testing Security Documentation Communication Check Discord at least twice daily Respond to Discord and or Messenger messages within 4 hours Attend meetings setup in advance Stay updated on Trello Coding Standards Use camelCase for variable names and PascalCase for class and filenames. We use the BEM naming structure. Write self-documenting code with meaningful variable and function names. Avoid deep nesting and keep functions small and focused. End multiline elements with a dangling Comma. Use === (eqeqeq) not ==! Indentations must be 2 spaces. No Eval - for safety. No trailing spaces. No unused variables. No Var. Use let or preferably const instead. Use single quotes not double quotes End lines of code with semicolon (;). Refactor Guidelines Best Practices: - Test after each refactoring - Keep functions small end focused - Avoid deep nesting - Use constants for magic numbers and strings Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor ( name , email ) { this . name = name ; this . email = email ; } sendEmail ( message ) { console . log ( `Sending email to ${ this . email } : ${ message } ` ); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities // Do this function calculateArea ( length , width ) { return length * width ; } const area1 = calculateArea ( length1 , width1 ); const area2 = calculateArea ( length2 , width2 ); const area3 = calculateArea ( length3 , width3 ); // Not this const area1 = length1 * width1 ; const area2 = length2 * width2 ; const area3 = length3 * width3 ; Keep It Simple Stupid Simpler code is easier to maintain Avoid clever tricks Clear and straightforward solutions are better Remember code is read more often than it is written // Do this - Simple code, easy to read function getUserStatus ( age , isMember ) { if ( age >= 18 ) { if ( isMember ) { return \"Adult Member\" ; } else { return \"Adult Non-Member\" ; } } else { if ( isMember ) { return \"Minor Member\" ; } else { return \"Minor Non-Member\" ; } } } // Not this - Clever but hard to read function getUserStatus ( age , isMember ) { const status = >= 18 ? \"Adult\" : \"Minor\" ; return ` ${ status } ${ isMember ? \"Member\" : \"Non-Member\" } ` ; } You Aren't Going To Need It Don't add it unless you need it Focus on current requirements class User { constructor ( name , email ) { this . name = name ; this . email = email ; this . phonenumber = phonenumber ; // We might need this later this . preferences = preferences ; // Also for later use } } Writing Self-Documenting Code Use explanitory variables, functions etc. //Good const currentDate = new Date (); const timestamp = currentDate . getTime (;) //Bad const d = new Date (); const n = currentDate . getTime (;) //Good function validateUserInput ( formData ) { // ... Validates user input } //Bad function data ( form ) { // ... does something with data } Code Comments Explain why, not what Keep Comments up to date Don't overuse comments /** * Calculates the total price including tax and discounts * @param {number} basePrise - the original price * @param {number} taxRate - taxrate as decimal (e.g., 0.2 for 20%) * @param {boolean} hasDiscount - Whether to standard discount * @returns {number} the final price */ function calculateFinalPrice ( basePrice , taxRate , hasDiscount ) { // implementation } Code Review Ensure code adheres to the coding standards. Check for sufficient test coverage. Provide constructive feedback and suggest improvements. Error Handling and Debugging Log errors to the console or terminal. Provide user-friendly error messages. Avoid exposing sensitive information in error messages. Testing Write unit tests for all new features. Use SonarQube for JavaScript testing. Maintain at least 80% test coverage. Security Never commit sensitive data (e.g., API keys, passwords). Validate all user inputs to prevent injection attacks. Use HTTPS for all API requests.","title":"Guidelines"},{"location":"guidelines/#team-guidelines","text":"","title":"Team Guidelines"},{"location":"guidelines/#introduction","text":"These guidelines are designed to ensure consistency, quality, and collaboration across the team. By following these practices, we can work efficiently and deliver high-quality results.","title":"Introduction"},{"location":"guidelines/#go-to-section","text":"Communication Coding Standards Refactor Guidelines Code Review Error Handling and Debugging Testing Security Documentation","title":"Go To Section"},{"location":"guidelines/#communication","text":"Check Discord at least twice daily Respond to Discord and or Messenger messages within 4 hours Attend meetings setup in advance Stay updated on Trello","title":"Communication"},{"location":"guidelines/#coding-standards","text":"Use camelCase for variable names and PascalCase for class and filenames. We use the BEM naming structure. Write self-documenting code with meaningful variable and function names. Avoid deep nesting and keep functions small and focused. End multiline elements with a dangling Comma. Use === (eqeqeq) not ==! Indentations must be 2 spaces. No Eval - for safety. No trailing spaces. No unused variables. No Var. Use let or preferably const instead. Use single quotes not double quotes End lines of code with semicolon (;).","title":"Coding Standards"},{"location":"guidelines/#refactor-guidelines","text":"Best Practices: - Test after each refactoring - Keep functions small end focused - Avoid deep nesting - Use constants for magic numbers and strings Single Responsibility Principle Each Function / Class should have one responsibility class User { constructor ( name , email ) { this . name = name ; this . email = email ; } sendEmail ( message ) { console . log ( `Sending email to ${ this . email } : ${ message } ` ); } } Don't Repeat Yourself Every piece of code should have a single representation Avoid copy/pasting code Create reusable functions and utilities // Do this function calculateArea ( length , width ) { return length * width ; } const area1 = calculateArea ( length1 , width1 ); const area2 = calculateArea ( length2 , width2 ); const area3 = calculateArea ( length3 , width3 ); // Not this const area1 = length1 * width1 ; const area2 = length2 * width2 ; const area3 = length3 * width3 ; Keep It Simple Stupid Simpler code is easier to maintain Avoid clever tricks Clear and straightforward solutions are better Remember code is read more often than it is written // Do this - Simple code, easy to read function getUserStatus ( age , isMember ) { if ( age >= 18 ) { if ( isMember ) { return \"Adult Member\" ; } else { return \"Adult Non-Member\" ; } } else { if ( isMember ) { return \"Minor Member\" ; } else { return \"Minor Non-Member\" ; } } } // Not this - Clever but hard to read function getUserStatus ( age , isMember ) { const status = >= 18 ? \"Adult\" : \"Minor\" ; return ` ${ status } ${ isMember ? \"Member\" : \"Non-Member\" } ` ; } You Aren't Going To Need It Don't add it unless you need it Focus on current requirements class User { constructor ( name , email ) { this . name = name ; this . email = email ; this . phonenumber = phonenumber ; // We might need this later this . preferences = preferences ; // Also for later use } } Writing Self-Documenting Code Use explanitory variables, functions etc. //Good const currentDate = new Date (); const timestamp = currentDate . getTime (;) //Bad const d = new Date (); const n = currentDate . getTime (;) //Good function validateUserInput ( formData ) { // ... Validates user input } //Bad function data ( form ) { // ... does something with data } Code Comments Explain why, not what Keep Comments up to date Don't overuse comments /** * Calculates the total price including tax and discounts * @param {number} basePrise - the original price * @param {number} taxRate - taxrate as decimal (e.g., 0.2 for 20%) * @param {boolean} hasDiscount - Whether to standard discount * @returns {number} the final price */ function calculateFinalPrice ( basePrice , taxRate , hasDiscount ) { // implementation }","title":"Refactor Guidelines"},{"location":"guidelines/#code-review","text":"Ensure code adheres to the coding standards. Check for sufficient test coverage. Provide constructive feedback and suggest improvements.","title":"Code Review"},{"location":"guidelines/#error-handling-and-debugging","text":"Log errors to the console or terminal. Provide user-friendly error messages. Avoid exposing sensitive information in error messages.","title":"Error Handling and Debugging"},{"location":"guidelines/#testing","text":"Write unit tests for all new features. Use SonarQube for JavaScript testing. Maintain at least 80% test coverage.","title":"Testing"},{"location":"guidelines/#security","text":"Never commit sensitive data (e.g., API keys, passwords). Validate all user inputs to prevent injection attacks. Use HTTPS for all API requests.","title":"Security"},{"location":"unitTest/","text":"Unit Test Documentation Documentation Unit Test Frameworks and Tools SonarQube End-to-End (E2E) Teststrategies Cypress APM (Application Performance Monitoring) Performance and benchmarks","title":"Unit Tests"},{"location":"unitTest/#unit-test-documentation","text":"","title":"Unit Test Documentation"},{"location":"unitTest/#documentation","text":"","title":"Documentation"},{"location":"unitTest/#unit-test-frameworks-and-tools","text":"","title":"Unit Test Frameworks and Tools"},{"location":"unitTest/#sonarqube","text":"","title":"SonarQube"},{"location":"unitTest/#end-to-end-e2e-teststrategies","text":"","title":"End-to-End (E2E) Teststrategies"},{"location":"unitTest/#cypress","text":"","title":"Cypress"},{"location":"unitTest/#apm-application-performance-monitoring","text":"","title":"APM (Application Performance Monitoring)"},{"location":"unitTest/#performance-and-benchmarks","text":"","title":"Performance and benchmarks"},{"location":"versioncontrol/","text":"Changelog and Version Control Introduction This document outlines the version control practices for the project and provides a changelog to track the history of changes. By following these guidelines, we ensure a consistent and organized workflow. Version Control Guidelines Branching Strategy Main Branch: Contains production-ready code. Feature Branches: Used for developing new features (e.g., feature/feature-name ). Bugfix Branches: Used for fixing bugs (e.g., bugfix/bug-name ). Commit Message Conventions Use semantic commit messages: feat: for new features. fix: for bug fixes. docs: for documentation updates. refactor: for code refactoring. test: for adding or updating tests. chore: for maintenance tasks. Pull Request Process Create a pull request for merging feature/bugfix branches into the main branch. Request a code review from at least one team member. Ensure all tests pass before merging. Changelog v1.0.0 - 2025-03-18 Initial release of the project. Added core features: User authentication. Dashboard with data visualization. API integration. v1.1.0 - 2025-03-25 Added new features: Dark mode support. Export data functionality. Fixed bugs: Resolved issue with login form validation. Best Practices Commit frequently with meaningful messages. Avoid committing sensitive data (e.g., API keys, passwords). Keep your feature branch up-to-date with the main branch. Resolve merge conflicts promptly.","title":"Changelog and Versioncontrol"},{"location":"versioncontrol/#changelog-and-version-control","text":"","title":"Changelog and Version Control"},{"location":"versioncontrol/#introduction","text":"This document outlines the version control practices for the project and provides a changelog to track the history of changes. By following these guidelines, we ensure a consistent and organized workflow.","title":"Introduction"},{"location":"versioncontrol/#version-control-guidelines","text":"","title":"Version Control Guidelines"},{"location":"versioncontrol/#branching-strategy","text":"Main Branch: Contains production-ready code. Feature Branches: Used for developing new features (e.g., feature/feature-name ). Bugfix Branches: Used for fixing bugs (e.g., bugfix/bug-name ).","title":"Branching Strategy"},{"location":"versioncontrol/#commit-message-conventions","text":"Use semantic commit messages: feat: for new features. fix: for bug fixes. docs: for documentation updates. refactor: for code refactoring. test: for adding or updating tests. chore: for maintenance tasks.","title":"Commit Message Conventions"},{"location":"versioncontrol/#pull-request-process","text":"Create a pull request for merging feature/bugfix branches into the main branch. Request a code review from at least one team member. Ensure all tests pass before merging.","title":"Pull Request Process"},{"location":"versioncontrol/#changelog","text":"","title":"Changelog"},{"location":"versioncontrol/#v100-2025-03-18","text":"Initial release of the project. Added core features: User authentication. Dashboard with data visualization. API integration.","title":"v1.0.0 - 2025-03-18"},{"location":"versioncontrol/#v110-2025-03-25","text":"Added new features: Dark mode support. Export data functionality. Fixed bugs: Resolved issue with login form validation.","title":"v1.1.0 - 2025-03-25"},{"location":"versioncontrol/#best-practices","text":"Commit frequently with meaningful messages. Avoid committing sensitive data (e.g., API keys, passwords). Keep your feature branch up-to-date with the main branch. Resolve merge conflicts promptly.","title":"Best Practices"}]}